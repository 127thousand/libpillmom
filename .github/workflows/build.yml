name: Build Native Libraries

on:
  push:
    branches: [main]
    paths:
      - 'packages/libpillmom/rust/**'
      - '.github/workflows/build.yml'
  workflow_dispatch:

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUST_BACKTRACE: short
  RUSTUP_MAX_RETRIES: 10

jobs:
  build-macos-ios:
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-apple-darwin,aarch64-apple-ios,aarch64-apple-ios-sim

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: packages/libpillmom/rust
          cache-on-failure: true
          shared-key: "macos"
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Setup sccache
        uses: mozilla-actions/sccache-action@v0.0.3

      - name: Build macOS and iOS libraries
        working-directory: packages/libpillmom/rust
        env:
          RUSTC_WRAPPER: sccache
        run: |
          # Create directories
          mkdir -p ../macos ../ios

          # Build for macOS ARM64
          cargo build --release --target aarch64-apple-darwin
          cp target/aarch64-apple-darwin/release/libpillmom.dylib ../macos/libpillmom.dylib
          # Fix install name to use @rpath
          install_name_tool -id "@rpath/libpillmom.dylib" ../macos/libpillmom.dylib

          # Build for iOS device
          cargo build --release --target aarch64-apple-ios

          # Build for iOS Simulator
          cargo build --release --target aarch64-apple-ios-sim

          # Create XCFramework
          xcodebuild -create-xcframework \
            -library target/aarch64-apple-ios/release/libpillmom.a \
            -library target/aarch64-apple-ios-sim/release/libpillmom.a \
            -output ../ios/libpillmom.xcframework

      - name: Show sccache stats
        run: sccache --show-stats

      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-ios-artifacts
          path: |
            packages/libpillmom/macos/*.dylib
            packages/libpillmom/ios/libpillmom.xcframework
          retention-days: 1

  build-linux-windows-android:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            output: linux/libpillmom.so
            extension: .so
          - target: x86_64-pc-windows-gnu
            output: windows/libpillmom.dll
            extension: .dll
            filename: pillmom.dll
          - target: aarch64-linux-android
            output: android/src/main/jniLibs/arm64-v8a/libpillmom.so
            extension: .so
          - target: armv7-linux-androideabi
            output: android/src/main/jniLibs/armeabi-v7a/libpillmom.so
            extension: .so
          - target: i686-linux-android
            output: android/src/main/jniLibs/x86/libpillmom.so
            extension: .so
          - target: x86_64-linux-android
            output: android/src/main/jniLibs/x86_64/libpillmom.so
            extension: .so

    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Free up disk space
        if: matrix.target == 'aarch64-linux-android'
        run: |
          echo "Disk space before cleanup:"
          df -h

          # Remove unnecessary tools and files
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf /usr/local/share/boost
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/hostedtoolcache/CodeQL

          # Clean apt cache
          sudo apt-get clean

          # Remove docker images we don't need
          docker system prune -af

          echo "Disk space after cleanup:"
          df -h

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: packages/libpillmom/rust
          cache-on-failure: true
          shared-key: "linux-${{ matrix.target }}"
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Cache cross binary
        id: cache-cross
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin/cross
          key: cross-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            cross-${{ runner.os }}-

      - name: Install cross
        if: steps.cache-cross.outputs.cache-hit != 'true'
        run: |
          # Download pre-built cross binary with Android fixes
          curl -L https://github.com/cross-rs/cross/releases/latest/download/cross-x86_64-unknown-linux-musl.tar.gz | tar xz
          mv cross ~/.cargo/bin/
          chmod +x ~/.cargo/bin/cross

      - name: Setup sccache
        uses: mozilla-actions/sccache-action@v0.0.3

      - name: Build ${{ matrix.target }}
        working-directory: packages/libpillmom/rust
        env:
          RUSTC_WRAPPER: sccache
        run: |
          # Create output directory
          mkdir -p ../$(dirname "${{ matrix.output }}")

          # Build target
          echo "Building ${{ matrix.target }}..."
          cross build --release --target ${{ matrix.target }}

          # Copy the built library
          if [ "${{ matrix.filename }}" != "" ]; then
            cp target/${{ matrix.target }}/release/${{ matrix.filename }} ../${{ matrix.output }}
          else
            cp target/${{ matrix.target }}/release/libpillmom${{ matrix.extension }} ../${{ matrix.output }}
          fi

      - name: Show sccache stats
        run: sccache --show-stats

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}
          path: packages/libpillmom/${{ matrix.output }}
          retention-days: 1

  commit-all:
    needs: [build-macos-ios, build-linux-windows-android]
    runs-on: ubuntu-latest
    # Only run on main branch to avoid conflicts
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          # Fetch more history to handle rebase if needed
          fetch-depth: 10

      - name: Pull latest changes
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

          # Try to pull and rebase up to 3 times in case of concurrent pushes
          for i in {1..3}; do
            echo "Attempt $i: Pulling latest changes..."
            if git pull --rebase origin main; then
              echo "Successfully pulled latest changes"
              break
            else
              if [ $i -eq 3 ]; then
                echo "Failed to pull after 3 attempts"
                exit 1
              fi
              echo "Pull failed, waiting 5 seconds before retry..."
              sleep 5
            fi
          done

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Copy all artifacts to correct locations
        run: |
          # Create all directories
          mkdir -p packages/libpillmom/{macos,ios,linux,windows}
          mkdir -p packages/libpillmom/android/src/main/jniLibs/{arm64-v8a,armeabi-v7a,x86,x86_64}

          # Copy macOS and iOS artifacts
          if [ -d "artifacts/macos-ios-artifacts" ]; then
            echo "Processing macOS and iOS artifacts..."
            cp artifacts/macos-ios-artifacts/packages/libpillmom/macos/*.dylib packages/libpillmom/macos/ 2>/dev/null || true
            cp -r artifacts/macos-ios-artifacts/packages/libpillmom/ios/libpillmom.xcframework packages/libpillmom/ios/ 2>/dev/null || true
          fi

          # Copy Linux, Windows, and Android artifacts
          for target_dir in artifacts/*; do
            target_name=$(basename "$target_dir")

            # Skip the macos-ios-artifacts as we handled it above
            if [ "$target_name" = "macos-ios-artifacts" ]; then
              continue
            fi

            echo "Processing $target_name"

            case "$target_name" in
              *linux-gnu*)
                cp "$target_dir"/packages/libpillmom/linux/* packages/libpillmom/linux/ 2>/dev/null || true
                ;;
              *windows*)
                cp "$target_dir"/packages/libpillmom/windows/* packages/libpillmom/windows/ 2>/dev/null || true
                ;;
              *android*)
                cp -r "$target_dir"/packages/libpillmom/android/* packages/libpillmom/android/ 2>/dev/null || true
                ;;
            esac
          done

      - name: Commit and push all changes
        run: |
          # Add all binary files
          git add -f packages/libpillmom/macos/*.dylib 2>/dev/null || true
          git add -f packages/libpillmom/ios/libpillmom.xcframework 2>/dev/null || true
          git add -f packages/libpillmom/linux/*.so 2>/dev/null || true
          git add -f packages/libpillmom/windows/*.dll 2>/dev/null || true
          git add -f packages/libpillmom/android/**/*.so 2>/dev/null || true

          # Check if there are changes to commit
          if ! git diff --staged --quiet; then
            git commit -m "Update native libraries for all platforms [skip ci]"

            # Try to push with retry logic
            for i in {1..3}; do
              echo "Attempt $i: Pushing changes..."
              if git push origin main; then
                echo "Successfully pushed changes"
                exit 0
              else
                if [ $i -eq 3 ]; then
                  echo "Failed to push after 3 attempts"
                  exit 1
                fi
                echo "Push failed, pulling and rebasing..."
                git pull --rebase origin main || exit 1
                echo "Retrying push..."
              fi
            done
          else
            echo "No changes to commit"
          fi