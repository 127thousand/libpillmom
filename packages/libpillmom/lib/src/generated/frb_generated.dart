// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'models.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
    bool forceSameCodegenVersion = true,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
      forceSameCodegenVersion: forceSameCodegenVersion,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.11.1';

  @override
  int get rustContentHash => 1202800820;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'pillmom',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<void> crateApiPillMomApiCloseDatabase({required PillMomApi that});

  Future<PlatformInt64> crateApiPillMomApiCreateMedication(
      {required PillMomApi that,
      required String name,
      required String dosage,
      required String description});

  Future<PlatformInt64> crateApiPillMomApiCreateReminder(
      {required PillMomApi that,
      required PlatformInt64 medicationId,
      required String time,
      required String days,
      required bool isActive});

  Future<bool> crateApiPillMomApiDeleteMedication(
      {required PillMomApi that, required PlatformInt64 id});

  Future<bool> crateApiPillMomApiDeleteReminder(
      {required PillMomApi that, required PlatformInt64 id});

  Future<List<Reminder>> crateApiPillMomApiGetActiveReminders(
      {required PillMomApi that});

  Future<List<Medication>> crateApiPillMomApiGetAllMedications(
      {required PillMomApi that});

  Future<void> crateApiPillMomApiInitLocalDatabase(
      {required PillMomApi that, required String path});

  Future<void> crateApiPillMomApiInitTursoDatabase(
      {required PillMomApi that,
      required String url,
      required String authToken});

  PillMomApi crateApiPillMomApiNew();

  Future<void> crateApiPillMomApiOpenEmbeddedReplica(
      {required PillMomApi that,
      required String path,
      required String url,
      required String authToken,
      double? syncPeriod});

  Future<void> crateApiPillMomApiOpenInMemory({required PillMomApi that});

  Future<void> crateApiPillMomApiOpenLocal(
      {required PillMomApi that, required String path});

  Future<void> crateApiPillMomApiOpenRemote(
      {required PillMomApi that,
      required String url,
      required String authToken});

  Future<PlatformInt64> crateApiPillMomApiSyncDatabase(
      {required PillMomApi that});

  Future<bool> crateApiPillMomApiUpdateMedication(
      {required PillMomApi that, required Medication medication});

  Future<bool> crateApiPillMomApiUpdateReminder(
      {required PillMomApi that, required Reminder reminder});

  PillMomApi crateApiCreateApi();

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_PillMomApi;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_PillMomApi;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_PillMomApiPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<void> crateApiPillMomApiCloseDatabase({required PillMomApi that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPillMomApi(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiPillMomApiCloseDatabaseConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPillMomApiCloseDatabaseConstMeta =>
      const TaskConstMeta(
        debugName: "PillMomApi_close_database",
        argNames: ["that"],
      );

  @override
  Future<PlatformInt64> crateApiPillMomApiCreateMedication(
      {required PillMomApi that,
      required String name,
      required String dosage,
      required String description}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPillMomApi(
            that, serializer);
        sse_encode_String(name, serializer);
        sse_encode_String(dosage, serializer);
        sse_encode_String(description, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_64,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiPillMomApiCreateMedicationConstMeta,
      argValues: [that, name, dosage, description],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPillMomApiCreateMedicationConstMeta =>
      const TaskConstMeta(
        debugName: "PillMomApi_create_medication",
        argNames: ["that", "name", "dosage", "description"],
      );

  @override
  Future<PlatformInt64> crateApiPillMomApiCreateReminder(
      {required PillMomApi that,
      required PlatformInt64 medicationId,
      required String time,
      required String days,
      required bool isActive}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPillMomApi(
            that, serializer);
        sse_encode_i_64(medicationId, serializer);
        sse_encode_String(time, serializer);
        sse_encode_String(days, serializer);
        sse_encode_bool(isActive, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 3, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_64,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiPillMomApiCreateReminderConstMeta,
      argValues: [that, medicationId, time, days, isActive],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPillMomApiCreateReminderConstMeta =>
      const TaskConstMeta(
        debugName: "PillMomApi_create_reminder",
        argNames: ["that", "medicationId", "time", "days", "isActive"],
      );

  @override
  Future<bool> crateApiPillMomApiDeleteMedication(
      {required PillMomApi that, required PlatformInt64 id}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPillMomApi(
            that, serializer);
        sse_encode_i_64(id, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 4, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiPillMomApiDeleteMedicationConstMeta,
      argValues: [that, id],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPillMomApiDeleteMedicationConstMeta =>
      const TaskConstMeta(
        debugName: "PillMomApi_delete_medication",
        argNames: ["that", "id"],
      );

  @override
  Future<bool> crateApiPillMomApiDeleteReminder(
      {required PillMomApi that, required PlatformInt64 id}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPillMomApi(
            that, serializer);
        sse_encode_i_64(id, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 5, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiPillMomApiDeleteReminderConstMeta,
      argValues: [that, id],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPillMomApiDeleteReminderConstMeta =>
      const TaskConstMeta(
        debugName: "PillMomApi_delete_reminder",
        argNames: ["that", "id"],
      );

  @override
  Future<List<Reminder>> crateApiPillMomApiGetActiveReminders(
      {required PillMomApi that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPillMomApi(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 6, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_reminder,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiPillMomApiGetActiveRemindersConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPillMomApiGetActiveRemindersConstMeta =>
      const TaskConstMeta(
        debugName: "PillMomApi_get_active_reminders",
        argNames: ["that"],
      );

  @override
  Future<List<Medication>> crateApiPillMomApiGetAllMedications(
      {required PillMomApi that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPillMomApi(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 7, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_medication,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiPillMomApiGetAllMedicationsConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPillMomApiGetAllMedicationsConstMeta =>
      const TaskConstMeta(
        debugName: "PillMomApi_get_all_medications",
        argNames: ["that"],
      );

  @override
  Future<void> crateApiPillMomApiInitLocalDatabase(
      {required PillMomApi that, required String path}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPillMomApi(
            that, serializer);
        sse_encode_String(path, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 8, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiPillMomApiInitLocalDatabaseConstMeta,
      argValues: [that, path],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPillMomApiInitLocalDatabaseConstMeta =>
      const TaskConstMeta(
        debugName: "PillMomApi_init_local_database",
        argNames: ["that", "path"],
      );

  @override
  Future<void> crateApiPillMomApiInitTursoDatabase(
      {required PillMomApi that,
      required String url,
      required String authToken}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPillMomApi(
            that, serializer);
        sse_encode_String(url, serializer);
        sse_encode_String(authToken, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 9, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiPillMomApiInitTursoDatabaseConstMeta,
      argValues: [that, url, authToken],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPillMomApiInitTursoDatabaseConstMeta =>
      const TaskConstMeta(
        debugName: "PillMomApi_init_turso_database",
        argNames: ["that", "url", "authToken"],
      );

  @override
  PillMomApi crateApiPillMomApiNew() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 10)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPillMomApi,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPillMomApiNewConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPillMomApiNewConstMeta => const TaskConstMeta(
        debugName: "PillMomApi_new",
        argNames: [],
      );

  @override
  Future<void> crateApiPillMomApiOpenEmbeddedReplica(
      {required PillMomApi that,
      required String path,
      required String url,
      required String authToken,
      double? syncPeriod}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPillMomApi(
            that, serializer);
        sse_encode_String(path, serializer);
        sse_encode_String(url, serializer);
        sse_encode_String(authToken, serializer);
        sse_encode_opt_box_autoadd_f_64(syncPeriod, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 11, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiPillMomApiOpenEmbeddedReplicaConstMeta,
      argValues: [that, path, url, authToken, syncPeriod],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPillMomApiOpenEmbeddedReplicaConstMeta =>
      const TaskConstMeta(
        debugName: "PillMomApi_open_embedded_replica",
        argNames: ["that", "path", "url", "authToken", "syncPeriod"],
      );

  @override
  Future<void> crateApiPillMomApiOpenInMemory({required PillMomApi that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPillMomApi(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 12, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiPillMomApiOpenInMemoryConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPillMomApiOpenInMemoryConstMeta =>
      const TaskConstMeta(
        debugName: "PillMomApi_open_in_memory",
        argNames: ["that"],
      );

  @override
  Future<void> crateApiPillMomApiOpenLocal(
      {required PillMomApi that, required String path}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPillMomApi(
            that, serializer);
        sse_encode_String(path, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 13, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiPillMomApiOpenLocalConstMeta,
      argValues: [that, path],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPillMomApiOpenLocalConstMeta =>
      const TaskConstMeta(
        debugName: "PillMomApi_open_local",
        argNames: ["that", "path"],
      );

  @override
  Future<void> crateApiPillMomApiOpenRemote(
      {required PillMomApi that,
      required String url,
      required String authToken}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPillMomApi(
            that, serializer);
        sse_encode_String(url, serializer);
        sse_encode_String(authToken, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 14, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiPillMomApiOpenRemoteConstMeta,
      argValues: [that, url, authToken],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPillMomApiOpenRemoteConstMeta =>
      const TaskConstMeta(
        debugName: "PillMomApi_open_remote",
        argNames: ["that", "url", "authToken"],
      );

  @override
  Future<PlatformInt64> crateApiPillMomApiSyncDatabase(
      {required PillMomApi that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPillMomApi(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 15, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_64,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiPillMomApiSyncDatabaseConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPillMomApiSyncDatabaseConstMeta =>
      const TaskConstMeta(
        debugName: "PillMomApi_sync_database",
        argNames: ["that"],
      );

  @override
  Future<bool> crateApiPillMomApiUpdateMedication(
      {required PillMomApi that, required Medication medication}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPillMomApi(
            that, serializer);
        sse_encode_box_autoadd_medication(medication, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 16, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiPillMomApiUpdateMedicationConstMeta,
      argValues: [that, medication],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPillMomApiUpdateMedicationConstMeta =>
      const TaskConstMeta(
        debugName: "PillMomApi_update_medication",
        argNames: ["that", "medication"],
      );

  @override
  Future<bool> crateApiPillMomApiUpdateReminder(
      {required PillMomApi that, required Reminder reminder}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPillMomApi(
            that, serializer);
        sse_encode_box_autoadd_reminder(reminder, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 17, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiPillMomApiUpdateReminderConstMeta,
      argValues: [that, reminder],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPillMomApiUpdateReminderConstMeta =>
      const TaskConstMeta(
        debugName: "PillMomApi_update_reminder",
        argNames: ["that", "reminder"],
      );

  @override
  PillMomApi crateApiCreateApi() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 18)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPillMomApi,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiCreateApiConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiCreateApiConstMeta => const TaskConstMeta(
        debugName: "create_api",
        argNames: [],
      );

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_PillMomApi => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPillMomApi;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_PillMomApi => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPillMomApi;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  PillMomApi
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPillMomApi(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PillMomApiImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  PillMomApi
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPillMomApi(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PillMomApiImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  PillMomApi
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPillMomApi(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PillMomApiImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  double dco_decode_box_autoadd_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  PlatformInt64 dco_decode_box_autoadd_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_i_64(raw);
  }

  @protected
  Medication dco_decode_box_autoadd_medication(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_medication(raw);
  }

  @protected
  Reminder dco_decode_box_autoadd_reminder(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_reminder(raw);
  }

  @protected
  double dco_decode_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  PlatformInt64 dco_decode_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64(raw);
  }

  @protected
  List<Medication> dco_decode_list_medication(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_medication).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<Reminder> dco_decode_list_reminder(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_reminder).toList();
  }

  @protected
  Medication dco_decode_medication(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 8)
      throw Exception('unexpected arr length: expect 8 but see ${arr.length}');
    return Medication(
      id: dco_decode_opt_box_autoadd_i_64(arr[0]),
      name: dco_decode_String(arr[1]),
      dosage: dco_decode_String(arr[2]),
      description: dco_decode_String(arr[3]),
      createdAt: dco_decode_String(arr[4]),
      updatedAt: dco_decode_String(arr[5]),
      deletedAt: dco_decode_opt_String(arr[6]),
      reminders: dco_decode_list_reminder(arr[7]),
    );
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  double? dco_decode_opt_box_autoadd_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_f_64(raw);
  }

  @protected
  PlatformInt64? dco_decode_opt_box_autoadd_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_i_64(raw);
  }

  @protected
  Reminder dco_decode_reminder(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 8)
      throw Exception('unexpected arr length: expect 8 but see ${arr.length}');
    return Reminder(
      id: dco_decode_opt_box_autoadd_i_64(arr[0]),
      medicationId: dco_decode_i_64(arr[1]),
      time: dco_decode_String(arr[2]),
      days: dco_decode_String(arr[3]),
      isActive: dco_decode_bool(arr[4]),
      createdAt: dco_decode_String(arr[5]),
      updatedAt: dco_decode_String(arr[6]),
      deletedAt: dco_decode_opt_String(arr[7]),
    );
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  PillMomApi
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPillMomApi(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PillMomApiImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  PillMomApi
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPillMomApi(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PillMomApiImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  PillMomApi
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPillMomApi(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PillMomApiImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  double sse_decode_box_autoadd_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_f_64(deserializer));
  }

  @protected
  PlatformInt64 sse_decode_box_autoadd_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_i_64(deserializer));
  }

  @protected
  Medication sse_decode_box_autoadd_medication(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_medication(deserializer));
  }

  @protected
  Reminder sse_decode_box_autoadd_reminder(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_reminder(deserializer));
  }

  @protected
  double sse_decode_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat64();
  }

  @protected
  PlatformInt64 sse_decode_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getPlatformInt64();
  }

  @protected
  List<Medication> sse_decode_list_medication(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Medication>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_medication(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<Reminder> sse_decode_list_reminder(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Reminder>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_reminder(deserializer));
    }
    return ans_;
  }

  @protected
  Medication sse_decode_medication(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_opt_box_autoadd_i_64(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_dosage = sse_decode_String(deserializer);
    var var_description = sse_decode_String(deserializer);
    var var_createdAt = sse_decode_String(deserializer);
    var var_updatedAt = sse_decode_String(deserializer);
    var var_deletedAt = sse_decode_opt_String(deserializer);
    var var_reminders = sse_decode_list_reminder(deserializer);
    return Medication(
        id: var_id,
        name: var_name,
        dosage: var_dosage,
        description: var_description,
        createdAt: var_createdAt,
        updatedAt: var_updatedAt,
        deletedAt: var_deletedAt,
        reminders: var_reminders);
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  double? sse_decode_opt_box_autoadd_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_f_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  PlatformInt64? sse_decode_opt_box_autoadd_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_i_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Reminder sse_decode_reminder(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_opt_box_autoadd_i_64(deserializer);
    var var_medicationId = sse_decode_i_64(deserializer);
    var var_time = sse_decode_String(deserializer);
    var var_days = sse_decode_String(deserializer);
    var var_isActive = sse_decode_bool(deserializer);
    var var_createdAt = sse_decode_String(deserializer);
    var var_updatedAt = sse_decode_String(deserializer);
    var var_deletedAt = sse_decode_opt_String(deserializer);
    return Reminder(
        id: var_id,
        medicationId: var_medicationId,
        time: var_time,
        days: var_days,
        isActive: var_isActive,
        createdAt: var_createdAt,
        updatedAt: var_updatedAt,
        deletedAt: var_deletedAt);
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPillMomApi(
          PillMomApi self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as PillMomApiImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPillMomApi(
          PillMomApi self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as PillMomApiImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPillMomApi(
          PillMomApi self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as PillMomApiImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_f_64(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_f_64(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_i_64(
      PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_medication(
      Medication self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_medication(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_reminder(
      Reminder self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_reminder(self, serializer);
  }

  @protected
  void sse_encode_f_64(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat64(self);
  }

  @protected
  void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putPlatformInt64(self);
  }

  @protected
  void sse_encode_list_medication(
      List<Medication> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_medication(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_reminder(List<Reminder> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_reminder(item, serializer);
    }
  }

  @protected
  void sse_encode_medication(Medication self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_box_autoadd_i_64(self.id, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_String(self.dosage, serializer);
    sse_encode_String(self.description, serializer);
    sse_encode_String(self.createdAt, serializer);
    sse_encode_String(self.updatedAt, serializer);
    sse_encode_opt_String(self.deletedAt, serializer);
    sse_encode_list_reminder(self.reminders, serializer);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_f_64(double? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_f_64(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_i_64(
      PlatformInt64? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_i_64(self, serializer);
    }
  }

  @protected
  void sse_encode_reminder(Reminder self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_box_autoadd_i_64(self.id, serializer);
    sse_encode_i_64(self.medicationId, serializer);
    sse_encode_String(self.time, serializer);
    sse_encode_String(self.days, serializer);
    sse_encode_bool(self.isActive, serializer);
    sse_encode_String(self.createdAt, serializer);
    sse_encode_String(self.updatedAt, serializer);
    sse_encode_opt_String(self.deletedAt, serializer);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }
}

@sealed
class PillMomApiImpl extends RustOpaque implements PillMomApi {
  // Not to be used by end users
  PillMomApiImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  PillMomApiImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_PillMomApi,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_PillMomApi,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_PillMomApiPtr,
  );

  Future<void> closeDatabase() =>
      RustLib.instance.api.crateApiPillMomApiCloseDatabase(
        that: this,
      );

  Future<PlatformInt64> createMedication(
          {required String name,
          required String dosage,
          required String description}) =>
      RustLib.instance.api.crateApiPillMomApiCreateMedication(
          that: this, name: name, dosage: dosage, description: description);

  Future<PlatformInt64> createReminder(
          {required PlatformInt64 medicationId,
          required String time,
          required String days,
          required bool isActive}) =>
      RustLib.instance.api.crateApiPillMomApiCreateReminder(
          that: this,
          medicationId: medicationId,
          time: time,
          days: days,
          isActive: isActive);

  Future<bool> deleteMedication({required PlatformInt64 id}) =>
      RustLib.instance.api
          .crateApiPillMomApiDeleteMedication(that: this, id: id);

  Future<bool> deleteReminder({required PlatformInt64 id}) =>
      RustLib.instance.api.crateApiPillMomApiDeleteReminder(that: this, id: id);

  Future<List<Reminder>> getActiveReminders() =>
      RustLib.instance.api.crateApiPillMomApiGetActiveReminders(
        that: this,
      );

  Future<List<Medication>> getAllMedications() =>
      RustLib.instance.api.crateApiPillMomApiGetAllMedications(
        that: this,
      );

  Future<void> initLocalDatabase({required String path}) => RustLib.instance.api
      .crateApiPillMomApiInitLocalDatabase(that: this, path: path);

  Future<void> initTursoDatabase(
          {required String url, required String authToken}) =>
      RustLib.instance.api.crateApiPillMomApiInitTursoDatabase(
          that: this, url: url, authToken: authToken);

  /// Connect to an embedded replica (local SQLite that syncs with remote)
  /// Note: Currently using remote connection due to FFI issues with embedded replicas
  Future<void> openEmbeddedReplica(
          {required String path,
          required String url,
          required String authToken,
          double? syncPeriod}) =>
      RustLib.instance.api.crateApiPillMomApiOpenEmbeddedReplica(
          that: this,
          path: path,
          url: url,
          authToken: authToken,
          syncPeriod: syncPeriod);

  /// Connect to an in-memory database (no persistence)
  Future<void> openInMemory() =>
      RustLib.instance.api.crateApiPillMomApiOpenInMemory(
        that: this,
      );

  /// Connect to a local SQLite database file
  Future<void> openLocal({required String path}) =>
      RustLib.instance.api.crateApiPillMomApiOpenLocal(that: this, path: path);

  /// Connect to a remote Turso database
  Future<void> openRemote({required String url, required String authToken}) =>
      RustLib.instance.api.crateApiPillMomApiOpenRemote(
          that: this, url: url, authToken: authToken);

  Future<PlatformInt64> syncDatabase() =>
      RustLib.instance.api.crateApiPillMomApiSyncDatabase(
        that: this,
      );

  Future<bool> updateMedication({required Medication medication}) => RustLib
      .instance.api
      .crateApiPillMomApiUpdateMedication(that: this, medication: medication);

  Future<bool> updateReminder({required Reminder reminder}) =>
      RustLib.instance.api
          .crateApiPillMomApiUpdateReminder(that: this, reminder: reminder);
}
